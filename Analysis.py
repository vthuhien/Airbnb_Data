# -*- coding: utf-8 -*-
"""Copy of Analyze.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18vCsWPQx8ZTRWCJUZ6xSmhChHRkNLggg

# **BƯỚC 1 : ĐỌC DỮ LIỆU**
"""

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import plotly.express as px
df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/pandas/ex/Airbnb_Data/Airbnb_Open_Data.csv')
df.head()

# số cột k hiển thị hết do bị tràn, tên cột hoa thường lẫn lộn, ta cần setup lại:
pd.set_option('display.max_columns',500)   # thiết lập số lượng tối đa pd in ra
pd.set_option('display.max_row',500)
print(df.shape) #cung cấp thông tin về kích thước của dữ liệu bạn đang làm việc.
df.head()

"""# **BƯỚC 2 : PHÂN TÍCH DỮ LIỆU, TÌM RA DỮ LIỆU NONE, ĐIỂM KHÔNG HỢP LỆ**"""

#xem kiểu dữ liệu từ cột
df.info()

"""XIN PHÍA ĐẦU DỮ LIỆU, Ý NGHĨA CỦA TỪNG CỘT

| Tên     | Mô tả |
| ----------- | ----------- |
| host_id      | Mã định danh của chủ nhà, khi bạn đăng kí cho thuê trên Airbnb, bên đó sẽ gán cho bạn 1 cái mã       |
| country   | Quốc gia của căn nhà        |
| host_identity_verified   | Chủ nhà có được xác thực hay chưa, hay là địa chỉ kinh doanh ảo       |
| minimum nights   | Số đêm tối thiểu mà chủ nhà cho phép đặt       |
| license   | Có thể là giấy phép kinh doanh      |
| last review   | Ngày được review cuối cùng      |
"""

df.describe() #mô tả về df theo các thông số

# Không nhìn hết được thì đảo chiều
df.describe().transpose()

"""Các dữ liệu thống kê bên trên cho mình thấy sự không hợp lý ở một số cột dữ liệu, ví dụ **minimum nights** sao lại có số âm,dùng cái bảng này để đánh giá ý nghĩa các cột số

Để rõ hơn số dòng dữ liệu Null thì:
"""

df.isnull().sum().sort_values(ascending = False) ## Đếm số lượng giá trị bị thiếu và sắp xếp giảm dần

"""# **BƯỚC 3 : LÀM SẠCH DỮ LIỆU**

### Qua dữ liệu làm sạch :


1.   Xử lý cột `last review`
2.   `host_identity_verified` có giá trị Null => mình sẽ chuyển chúng sang `unconfirmed` hết
3.   Xử lý `minimum nights,availability 365`(có các gtri là số âm), `min=-1223` `max=5645`
4.   Xử lý cột `price`

**Giá trị trung vị (median)** là giá trị nằm ở vị trí giữa của một tập hợp dữ liệu


- tính gtri trung vị
      - dãy dữ liệu lẻ : 3,5,7,9,11. Gtri trung vị là số 7, gtri nằm giữa của dãy
      - dãy dữ liệu chẵn : 3,5,7,9. Gtri trung vị là trung bình cộng của 2 gtri nằm giữa dãy là (5+7)/2 = 6
- thường sử dụng trong các tình huống:
      - Khi dữ liệu có các giá trị ngoại lệ (như quá nhiều none, quá nhiều số âm k hợp lệ, các giá trị này có thể cực kỳ lớn hoặc cực kỳ nhỏ so với các giá trị còn lại, và chúng có thể ảnh hưởng đáng kể đến các phân tích thống kê)
      - Khi làm việc với dữ liệu theo thang đo thứ tự
      - Khi dữ liệu không đối xứng
-Khi nào nên sử dụng giá trị trung bình (mean) thay vì trung vị?
      - khi sử dụng toàn bộ thông tin trong dữ liệu
      - Dữ liệu có phân phối đối xứng
      - Khi dữ liệu k có các giá trị ngoại lệ
      - Dữ liệu định lượng, cân nặng, chiều cao và có sự liên tục, ổn định
      - Khi cần tính toán các chỉ số khác dựa trên trung bình, mục tiêu là sử dụng toàn bộ thông tin của dữ liệu
      - khi dữ liệu sạch, kích thước mẫu lớnq

# 1.   Xử lý cột `last review`

Chuyển `last review` sang kiểu dữ liệu datetime và check thấy tới năm 2058 luôn

Nên làm với tất cả ngày tháng trong dữ liệu
"""

# rs = pd.to_datetime(df['last review'])  #được sử dụng để chuyển đổi kdl trong cột 'last review' sang kdl ngày tháng
# rs.min(), rs.max()  #in ra gtri ntns nhỏ nhất và lớn nhất của cột dữ liệu

#ta phải truyền trực tiếp vì biến rs chỉ là biến lưu trữ thôi chứ k cập nhật dữ liệu
df['last review'] = pd.to_datetime(df['last review'])
df['last review'].min(), df['last review'].max()

year_value =df[df['last review'].apply(lambda x: x.year> 2022)] # tìm ra gtri những năm lớn hơn 2022
print(len(year_value)) # đếm số lượng dữ liệu lớn hơn năm 2022

# tìm gtri trung vị bằng hàm median
median_value = df['last review'].median()
print(median_value)

df.loc[year_value.index,'last review'] = median_value # thay thế các gtri này thành gtri trung vị của cột last review

"""`last review` là cột chứa thông tin về ngày đánh giá gần nhất hoặc lần xem xét cuối cùng cho một sản phẩm, mục nào đó.

Cột này thường bao gồm các giá trị ngày tháng, cho biết thời điểm lần cuối cùng mà một đánh giá hoặc kiểm tra được thực hiện.
"""

# sau khi thay thế gtri có năm lớn hơn 2022 thì ta lại check những gtri null
# ta thấy những gtri null có nhiều lượt review ở cột 'number of reviews' nhưng sang cột 'last review' thì lại null
# nên ta thay thể những gtri null đó cũng thành gtri trung vị như trên

# tìm ra những gtri null
null_value = df[(df['last review'].isnull()) & (df['number of reviews']>0)]
print(len(null_value))

# thay thế những gtri null bằng gtri trung vị
df.loc[null_value.index, 'last_review'] = median_value

"""# 2. Xử lý cột `host_identity_verified` có giá trị Null

### Sự khác nhau giữa df [ df [ 'service ' ] ] và df [ 'service ' ]
- df [ 'service ' ] : là truy cập tới cả một cột trong df, cụ thể là service. Kết quả: trả về một Series chứa tất cả các giá trị của cột service đó.</br>
- df [ df [ 'service ' ] ] : là lọc tất cả các hàng trong cột service của df
"""

#ý tưởng tìm ra gtri null và thay thế chúng thành unconfirmed
# cach 1: (chỉ tìm dc gtri null)
# null_value_host = df[df['host_identity_verified'].isnull()]
# print(len(null_value_host))

#cách 2: (lấy dc full tất cả gtri)
all_value = df['host_identity_verified'].value_counts(dropna = False)
#value_counts() : đếm số lần xuất hiện của tất cả các gtri trong cột
#dropna = False : là đảm bảo giá trị null cũng dc tính và in ra
print(all_value)
print()

# thay thế gtri null thành unconfirmed
df['host_identity_verified'].fillna('unconfirmed', inplace = True)
#fillna() : làm đầy gtri rỗng bằng 1 gtri khác
#inplace = True : là thay đổi df ban đầu nếu False là tạo ra 1 df mới

# sau khi thay thế ta check lại
value_after = df['host_identity_verified'].value_counts(dropna = False)
print(value_after)

"""# 3.   Xử lý `minimum nights,availability 365`"""

# trong 2 cột có những gtri âm vô lý nên mình sẽ nhân với -1 để chúng thành dương
df['minimum nights'] = df['minimum nights'].apply(lambda x : x*-1 if x<0 else x) # nếu x<0 (tức gtri âm) thì nhân với -1 còn else x( tức gtri dương) thì giữ nguyên
df['availability 365'] = df['availability 365'].apply(lambda x : x*-1 if x<0 else x)

"""Trong cột `minimun nights` có nhiều gtri quá lớn như 399,452.. mà trong khi `availability 365` max là 1 năm có 365 ngày. Ta thấy k hợp lệ,bên phía cột `availability 365` cũng có những gtri tương tự. Đây là các gtri ngoại lệ(outlier)

Khi loại bỏ ngoại lệ, điểm cutpoint được sử dụng để xác định các giá trị ngoại lệ hoặc giá trị không mong muốn. Những giá trị vượt quá điểm cutpoint thường bị coi là ngoại lệ và có thể bị loại bỏ hoặc xử lý theo cách khác.
"""

#loại bỏ dữ liệu outlier

cutpoint = df['minimum nights'].quantile(0.99) #tìm ra điểm cutpoint
# Xác định điểm cutpoint dựa trên phân vị 99%, các giá trị nằm ngoài khoảng này (cụ thể là lớn hơn điểm cutpoint) có thể được coi là ngoại lệ
print('Your cutpoint: ',cutpoint)

# Loại bỏ các giá trị lớn hơn điểm cutpoint
df = df[(df['minimum nights']<=cutpoint)]
#làm tương tự với cột availability 365

cutpoint_365 = df['availability 365'].quantile(0.99)
df = df[df['availability 365'] <= cutpoint]

"""# 4.Xử lý cột `price` và `service fee`
Khi có những kí tự đb thì pd sẽ đọc thành string </br>
Vì cột có những kí tự "$" </br>

Và nhiều hàng gtri cao như : "$1,052",.... có chứa cả dấu " , " nữa ta cũng cần loại bỏ để biến chúng từ str thành int


"""

# loại bỏ những gtri nulll - vì null thì lấy đâu ra gtri mà biển đối sang string=)) hơn nữa hàm astype() k thể sd khi có gtri null
df = df[~df['price'].isnull()]  # dấu ~ là đảo ngược gtri, mặc định của isnull() là True đảo lại thành False
# khi thực hiện xong hàm thì cột df2 sẽ chứa tca những gtri null của cột price mà k hề ảnh hướng tới cột price

#k thể dùng như này vì hàm isnull() chỉ loại bỏ những gtri null trong 1 cột còn notnull() là loại bỏ hẳn cả 1 hàng, ảnh hưởng tới những cột khác trong df
# df['price'] = df[df['price'].notnull()]

# phải lọc ra trước và biến đổi thành '0' để đảm bảo đúng định dạng str cho các bước biến đổi sau chỉ cần .str là xong
#loại bỏ các gtri nan, NaN, nAn,... dưới dạng str thay thế thành '0'
df['price'] = df['price'].apply(lambda x: '0' if str(x).lower() == 'nan' else str(x)) #kiểm tra xem giá trị x có chuỗi 'nan' hay không, bất kể chữ hoa hay chữ thường

# loại bỏ những gtri rỗng thay thế thành '0'
df['price'] = df['price'].apply(lambda x: '0' if str(x).strip() == '' else str(x))
# strip() là loại bỏ các khoảng trắng ở đầu và cuối chuỗi. Ví dụ, ' 123 ' sẽ trở thành '123'.


# loại bỏ kí tự '$' và kí ',' trong những gtri str
# df['price'] = df['price'].apply(lambda x : str(x).replace('$','') if '$' in str(x) else str(x))
# df['price'] = df['price'].apply(lambda x : str(x).replace(',','') if ',' in x else x)
# hay
df['price'] = df['price'].str.replace('$', '')
df['price'] = df['price'].str.replace(',', '')

# biến đổi str thành int
df['price'] = df['price'].astype(int)


# tương tự với cột 'service fee'
df3 = df[~df['service fee'].isnull()]
df['service fee'] = df['service fee'].astype(str)
#check xem có gtri nào nan,Nan,NaN,nAn,.. hoặc rỗng không

df['service fee'] = df['service fee'].apply(lambda x: '0' if str(x).lower() == 'nan' else str(x))
df['service fee'] = df['service fee'].apply(lambda x: '0' if str(x).strip() == '' else str(x))
# df['service fee'] == df['service fee'].apply(lambda x : '0' if str(x).lower() in ['nan','none',''] else str(x))

df['service fee'] = df['service fee'].apply(lambda x : str(x).replace('$','') if '$' in str(x) else str(x))
#convert từ str sang int
df['service fee'] = df['service fee'].astype(int)
df.head(6)

"""# **4.Thống kê dữ liệu**

## Neighbourhood group - barchart
"""

# Thống kê loại khu vực
print(df['neighbourhood'].value_counts())
print('-' * 25)
print(df['neighbourhood'].value_counts(normalize=True))

import  matplotlib
import plotly.express as px

rm = df['neighbourhood'].value_counts()

# gtri bảng
fig = px.bar(y = rm.values, # tổng số lượng các loại khu vực
             x = rm.index, # các loại khu vực (name)
             color = rm.index,  #màu dựa theo index khu vực
             color_discrete_sequence=px.colors.sequential.Plasma, #blend màu
             text = rm.values,
             title = "Neighbourhoods",
             template = "plotly_dark"
             )

# thông số bảng, bố cục biểu đồ
fig.update_layout(
    xaxis_title = "Neighbourhood",
    yaxis_title = "count",
    font = dict(size=17,family="Franklin Gothic"),
    height=1000
    )

fig.show()

"""## Scatter Mapbox - biểu đồ phân tán"""

print(df['neighbourhood group'].value_counts())  # số lượng khu vực lân cận

#so sánh price dựa theo từng khu vực lân cận

fig = px.scatter_mapbox(df,
           lat="lat",  #latitude - vĩ độ
           lon="long", #longitude - kinh độ
           opacity = 0.3,
           hover_name="neighbourhood group",
           hover_data=["neighbourhood group", "price"], #thông tin hiển thị gtri khi user di chuột trên bản đồ
           color="price", #màu dựa theo price
           color_discrete_sequence=px.colors.sequential.PuBuGn, # mã màu
           zoom=10
           )

fig.update_layout(mapbox_style="open-street-map") # cũng có thể sd kiểu bản đồ "carto-positron"
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0}, #loại bỏ lề xung quanh biểu đồ, tận dụng toàn bộ không gian
                  font = dict(size=17,family="Franklin Gothic"))
fig.show()

print(df['room type'].value_counts())

"""## Piechart - Constrction Year"""

print(df['Construction year'].value_counts())

constr_year = df["Construction year"].value_counts()
fig = px.pie(
    values = constr_year.values,
    names = constr_year.index,
    color_discrete_sequence = ['#CDEDDD', '#EF553B', '#00CC96', '#AB63FA'], #mã hex
    title= 'Construction Year',template='plotly_dark'
)
fig.update_layout(
    font=dict(size=20,family="Franklin Gothic"),
    height=900)
fig.show()

"""## Line Chart - Check identity by room type"""

print(df['room type'].value_counts())
print('-' * 25)
print(df['host_identity_verified'].value_counts())



# ktra xác minh danh tính theo từng kiểu phòng

# room_type = df['room type'].value_counts()
# room_price_avg = df['price'].median()
# print(room_price_avg)
# room = room_type.values
# print(df['price'])
# print(room_type)
constr_year = df['Construction year'].value_counts().sort_index()
fig = px.line( x=constr_year.index,
              y= constr_year.values,
              markers=True,
              line_shape='linear',
              text = constr_year.values,
              height=900)

fig.update_layout(title='Construction_Year',
                  xaxis_title='Count',
                  yaxis_title='Year',
                  font = dict(size=17, family="Franklin Gothic"),
                  )
fig.show()